<?php

use Drupal\file\Entity\File;
use Drupal\block\Entity\Block;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_page().
 *
 */
function inten_preprocess_page(array &$variables) {
  $themePath = \Drupal::theme()->getActiveTheme()->getPath();

  $site_config = Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');

  $banner_url = "/${themePath}/img/logo.jpg";
  $config = Drupal::config('isa_site_config.config');
  $banner = $config->get('banner');
  if ($banner && count($banner)) {
    $bannerId = array_pop($banner);
    $file = File::load($bannerId);
    if ($file) {
      $banner_url = $file->createFileUrl();
    }
  }

  $variables['banner_url'] = $banner_url;

  $main_class = 'folder';
  if (isset($variables['node'])) {
    $main_class = 'document';
  }
  $variables['main_class'] = $main_class;
}

/**
 *
 * @param array $suggestions
 * @param array $variables
 *
 */
function inten_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  if (isset($variables['elements']['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $content */
    $content = $variables['elements']['content']['#block_content'];
    $suggestions[] = 'block__content__' . $content->bundle();
  }

  if (isset($variables['elements']['#id']) && !empty($variables['elements']['#id'])) {
    $bid = $variables['elements']['#id'];
    $block = Block::load($bid);
    $suggestions[] = 'block__region__' . $block->getRegion();

    if (isset($variables['elements']['content']['#block_content'])) {
      /** @var \Drupal\block_content\Entity\BlockContent $content */
      $content = $variables['elements']['content']['#block_content'];
      $suggestions[] = 'block__region__' . $block->getRegion() . '__' . $content->bundle();
    }
  }
}

function inten_preprocess_webform(&$variables) {
  if (isset($variables["element"]["#webform_id"])) {
    $config = Drupal::config('isa_site_config.config');
    $variables['description'] = $config->get('contact_form_description');
    $variables['purpose'] = $config->get('contact_form_purpose');
    $variables['address'] = $config->get('address');

    $site_config = Drupal::config('system.site');
    $variables['site_name'] = $site_config->get('name');

    $variables['attributes']['class'][] = 'Form';
  }
}

/**
 * Implementation of hook_preprocess_form_element
 *
 * @param $variables
 */
function inten_preprocess_form_element(&$variables) {
  if ($variables['type'] != 'checkbox') {
    $variables['label']['#attributes']['class'][] = 'Form-label';

    if (isset($variables['label']['#title'])) {
      $variables['label']['#title'] = $variables['label']['#title'] . ':';
    }

    if (isset($variables['label']['#required']) && $variables['label']['#required']) {
      $variables['label']['#title'] = $variables['label']['#title'] . '*';
    }
  }
}

function inten_preprocess_input(&$variables) {
  if ($variables['element']['#type'] === 'textfield') {
    $variables['attributes']['class'][] = 'Form-widget';
  }
  if ($variables['element']['#type'] === 'submit') {
    $variables['attributes']['class'][] = 'Button Button--primary';
  }
}


function inten_preprocess_file_link(&$variables) {
  /** @var \Drupal\file\Entity\File $file */
  $file = $variables['file'];
  $variables['file_name'] = $file->getFilename();
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Cambiar el template sugerido de las vistas modo carpeta,
 *
 * @param array $suggestions
 * @param array $variables
 */
function inten_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $currentPath = \Drupal::service('path.current')->getPath();

  //Todo, creo que esto se puede mejorrar, en dependencia de lo que se quiera mostrar en formato carpeta
  $searchPages = ['/buscar-tramites'];
  // Add content type suggestions.
  if (in_array($currentPath, $searchPages)) {
    array_splice($suggestions, 1, 0, 'page__buscar');
  }

  $current_route = \Drupal::routeMatch()->getRouteName();
  // Apply same page template for revision nodes to get full functionality.
  if (in_array($current_route, ['entity.node.revision', 'entity.node.latest_version'])) {
    $node = \Drupal::routeMatch()->getParameter('node');
    $revision = \Drupal::routeMatch()->getParameter('node_revision');
    $node = ($node instanceof \Drupal\node\NodeInterface) ? $node : \Drupal::entityTypeManager()->getStorage('node')->loadRevision($revision);;
    if ($node instanceof \Drupal\node\NodeInterface && !$node->isDefaultRevision()) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__node__' . $content_type;
    }
  }
}


function inten_preprocess_pager(&$variables) {
  $element = $variables['pager']['#element'];
  /* @var $pager_manager \Drupal\Core\Pager\PagerManagerInterface */
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  if ($pager) {
    $current_page = $pager->getCurrentPage();
    $limit = $pager->getLimit();
    $start = ($limit * $current_page) + 1;

    $finish = $start + $limit - 1;
    if ($current_page + 1 === $pager->getTotalPages()) {
      $finish = $pager->getTotalItems();
    }

    $variables['total_items'] = $pager->getTotalItems();
    $variables['limit'] = $limit;
    $variables['start'] = $start;
    $variables['finish'] = $finish;
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function inten_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks.html.twig.
 */
function inten_preprocess_menu_local_tasks(&$variables) {
  $variables['nav_style'] = 'nav-pills';
  // $variables['nav_style'] = 'nav-tabs';
}

function inten_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  if(in_array($node->getType(), ['file', 'authorities'])){
    /** @var \Drupal\file\Entity\File $file */
    $file =  $node->get('field_file')->entity;
    if($file) {
      $variables['file_size'] = format_size($file->getSize());
      $variables['file_name'] = $file->getFilename();
      $variables['file_url'] = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
      $variables['file_extension'] = pathinfo($file->getFilename(), PATHINFO_EXTENSION);
    }
  }

  
}

function inten_preprocess_field(&$variables) {
  if (!empty($variables['field_name'])) {
    switch ($variables['field_name']) {
      case 'field_audio':
        $delta = 0;
        while (!empty($variables['items'][$delta])) {
          $element = $variables['items'][$delta]['content'];
          $file = $element['#file'];
          $description = $element['#description'];
          $variables['items'][$delta]['file_name'] = $description ? $description : $file->getFilename();
          $variables['items'][$delta]['file_url'] = \Drupal::service('file_url_generator')->generateString($file->getFileUri());
          $delta++;
        }
        break;
      case 'field_tags':
        $delta = 0;
        while (!empty($variables['items'][$delta])) {
          $variables['items'][$delta]['content']['#options']['attributes']['class'][] = 'tag-item';
          $delta++;
        }
        break;
    }
  }
}

function inten_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook === 'form' && !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}


/**
 * Implements hook_preprocess_HOOK() for block--content--links.html.twig.
 */
function inten_preprocess_block(&$variables) {
  if ($variables["base_plugin_id"] == 'block_content') {
    /** @var \Drupal\block_content\Entity\BlockContent $block */
    $block = $variables['content']['#block_content'];
    if ($block->bundle() == 'links') {

    // asumo que el campo se llama field_links
    $links = $block->get('field_links');

    $variables['processes_links'] = [];
    foreach ($links as $item) {
      /** @var \Drupal\Core\Url $url */
      $url = $item->getUrl() ?: Url::fromRoute('<none>');

      $class = '';
      if(!$url->isExternal()
        && $url->isRouted()
        && $url->getRouteName() === Drupal::routeMatch()->getRouteName()
        && $url->getRouteParameters() == Drupal::routeMatch()->getRawParameters()->all()
      ){
        $class = 'is-active';
      }

      $variables['processes_links'][] =  [
        'class' => $class,
        'link' => Link::fromTextAndUrl($item->title, $url)
      ];
    }
    }
  }
}




