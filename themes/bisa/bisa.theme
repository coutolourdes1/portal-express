<?php

/**
 * @file
 * Functions to support theming in the bisa theme.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess_page() for page.html.twig.
 *
 * @param array $variables
 */
function bisa_preprocess_page(array &$variables) {
  $site_config = Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');

  $full_screen = FALSE;
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id && $view_id === 'services') {
    $full_screen = TRUE;
  }

  $variables['full_screen'] = $full_screen;
}

/**
 * Implements hook_preprocess_menu().
 *
 * @param $variables
 * @param $hook
 */
function bisa_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu__main') {
    $site_config = Drupal::config('system.site');
    $variables['site_name'] = $site_config->get('name');

    // Get the Logo Url
    $logo_url = \Drupal::service('file_url_generator')->generateString(theme_get_setting('logo.url'));
    $variables['logo_url'] = str_replace('.svg', '.png', $logo_url);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * @param $suggestions
 * @param $variables
 */
function bisa_theme_suggestions_block_alter(&$suggestions, $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

function bisa_preprocess_input(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  if ($current_path === "/search/node") {
    if ($variables['element']['#type'] === 'textfield') {
      $variables['attributes']['class'][] = 'isa-search-input';
    }
    if ($variables['element']['#type'] === 'submit') {
      $variables['attributes']['class'][] = 'isa-search-button';
    }
  }
}

function bisa_preprocess_form(&$variables) {
  if ($variables['element']['#form_id'] === 'views_exposed_form' && strpos($variables['element']['#action'], 'search/node') !== FALSE) {
    $variables['attributes']['class'][] = 'isa-search-form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bisa_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $suggestions[] = 'field__' . $element['#formatter'];
}

function bisa_preprocess_file_link(&$variables) {
  $variables['link']['#attributes']['target'] = '_blank';
}


/**
 * Implements hook_theme_suggestions_alter() for contact form container.
 *
 * @param array $suggestions
 * @param array $variables
 */
function bisa_theme_suggestions_container_alter(array &$suggestions, array &$variables) {
  $element = $variables['element'];

  $name = '';
  $type = '';
  if (isset($element['#name'])) {
    $name = '__' . $element['#name'];
  }
  elseif (isset($element['#attributes']['data-suggestion-form'])) {
    $name = '__' . $element['#attributes']['data-suggestion-form'];
  }

  if (isset($element['#type'])) {
    $type = $element['#type'];
  }

  array_unshift($suggestions, 'container__' . $type . $name);
}

/**
 * Implements hook_theme_suggestions_form_alter() for all forms.
 *
 * @param array $suggestions
 * @param array $variables
 */
function bisa_theme_suggestions_form_alter(array &$suggestions, array $variables) {

  $formId = $variables['element']['#id'] ?? NULL;
  if ($formId) {
    $suggestions[] = 'form__' . str_replace(['-', '_form'], ['_', ''], $formId);
  }

  $themes = $variables['element']['#theme'] ?? [];
  foreach ($themes as $theme) {
    $suggestion = 'form__' .str_replace(['-', '_form'], ['_', ''], $theme);
    if (!in_array($suggestion, $suggestions)) {
      $suggestions[] = $suggestion;
    }
  }
}

/**
 * Prepares variables for comment templates.
 *
 * Default template: comment.html.twig.
 */
function bisa_preprocess_comment(&$variables) {
  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');

  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $variables['elements']['#comment'];
  $variables['permalink_href'] = $comment->permalink()->toString();

  $variables['created'] = $date_formatter->format($comment->getCreatedTime(), 'short');
}
